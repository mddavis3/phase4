Aaron Posey

Using your phase 1 and 2 library for testing


Test cases for phase3

(Quick Summary)
P Testcase 00
P Testcase 01
P Testcase 02
P Testcase 03
P Testcase 04
P Testcase 05
P Testcase 06
_ Testcase 07
P Testcase 08
P Testcase 09
P Testcase 10
P Testcase 11 
_ Testcase 12


Test cases passed 00/13


Our Output:

starting test 00 ....

start4(): Start 5 children who all sleep for 10 seconds. Upon
          waking up, each child checks if its sleep time was at
          least 10 seconds.
Child1(): Going to sleep for 10 seconds
Child2(): Going to sleep for 10 seconds
Child3(): Going to sleep for 10 seconds
Child4(): Going to sleep for 10 seconds
Child5(): Going to sleep for 10 seconds
Child1(): Sleep done at time 10090092
Child2(): Sleep done at time 10090119
Child3(): Sleep done at time 10090148
Child4(): Sleep done at time 10090179
Child5(): Sleep done at time 10090210
start4(): Test sleep done.
All processes completed.

starting test 01 ....

start4(): Spawning Child(0)
start4(): Spawning Child(1)
start4(): Spawning Child(2)
start4(): Spawning Child(3)
start4(): Spawning Child(4)
start4(): Spawning Child(5)
start4(): Spawning Child(6)
start4(): Spawning Child(7)
start4(): Spawning Child(8)
start4(): Spawning Child(9)
start4(): Waiting on Child
Child0(): Sleeping for 30 seconds
Child1(): Sleeping for 27 seconds
Child2(): Sleeping for 24 seconds
Child3(): Sleeping for 21 seconds
Child4(): Sleeping for 18 seconds
Child5(): Sleeping for 15 seconds
Child6(): Sleeping for 12 seconds
Child7(): Sleeping for 9 seconds
Child8(): Sleeping for 6 seconds
Child9(): Sleeping for 3 seconds
Child9(): After sleeping 3 seconds, diff in sys_clock is 3089502
start4(): Wait returned 0, pid:18, status 19
start4(): Waiting on Child
Child8(): After sleeping 6 seconds, diff in sys_clock is 6089531
start4(): Wait returned 0, pid:17, status 18
start4(): Waiting on Child
Child7(): After sleeping 9 seconds, diff in sys_clock is 9089564
start4(): Wait returned 0, pid:16, status 17
start4(): Waiting on Child
Child6(): After sleeping 12 seconds, diff in sys_clock is 12089597
start4(): Wait returned 0, pid:15, status 16
start4(): Waiting on Child
Child5(): After sleeping 15 seconds, diff in sys_clock is 15089624
start4(): Wait returned 0, pid:14, status 15
start4(): Waiting on Child
Child4(): After sleeping 18 seconds, diff in sys_clock is 18089648
start4(): Wait returned 0, pid:13, status 14
start4(): Waiting on Child
Child3(): After sleeping 21 seconds, diff in sys_clock is 21089679
start4(): Wait returned 0, pid:12, status 13
start4(): Waiting on Child
Child2(): After sleeping 24 seconds, diff in sys_clock is 24089718
start4(): Wait returned 0, pid:11, status 12
start4(): Waiting on Child
Child1(): After sleeping 27 seconds, diff in sys_clock is 27089738
start4(): Wait returned 0, pid:10, status 11
start4(): Waiting on Child
Child0(): After sleeping 30 seconds, diff in sys_clock is 30089763
start4(): Wait returned 0, pid:9, status 10
All processes completed.

starting test 02 ....

start4(): started
start4(): unit 0, sector size 512, track size 16, disk size 16
start4(): unit 1, sector size 512, track size 16, disk size 32
start4(): calling Terminate
All processes completed.

starting test 03 ....

start4(): started
start4(): unit 0, sector size 512, track size 16, disk size 16
start4(): unit 1, sector size 512, track size 16, disk size 32

start4(): writing to disk 0, track 5, sector 0
start4(): DiskWrite returned status = 0

start4(): reading from disk 0, track 5, sector 0
start4(): DiskRead returned status = 0
start4(): disk_buf_B contains:
A wonderful message to put on the disk...
start4(): calling Terminate
All processes completed.

starting test 04 ....

start4(): Testing disk 0
start4(): Read from disk: This is a test

start4(): Read from disk: Does it work?

start4(): Read from disk: One last chance

start4(): Testing disk 1
start4(): Read from disk: This is a test

start4(): Read from disk: Does it work?

start4(): Read from disk: One last chance

start4(): Terminating
All processes completed.

starting test 05 ....

start4(): Writing data to 3 disk sectors, then reading them back
          Confirm that data read back matches data read in
start4(): Testing Disk 0
start4(): Test of disk 0 succeeded.
start4(): Testing Disk 1
start4(): Test of disk 1 succeeded.
start4(): Done.
All processes completed.

starting test 06 ....

start4(): Writing data to 3 disk sectors, wrapping to next track

start4(): Disk 0:
start4(): Read from disk: This is a test

start4(): Read from disk: Does it work?

start4(): Read from disk: One last chance


start4(): Disk 1:
start4(): Read from disk: This is a test

start4(): Read from disk: Does it work?

start4(): Read from disk: One last chance

All processes completed.

starting test 07 ....
starting test 08 ....

start4(): Attempt to write to a non-existant disk, disk 3
start4(): done
All processes completed.

starting test 09 ....

start4(): disk scheduling test, 8 children
          algorithm test           
          different tracks
going to write track 5
going to write track 3
going to write track 9
going to write track 0
going to write track 7
going to write track 2
going to write track 1
going to write track 6
after writing track 5
process 9 quit with status 2
after writing track 3
process 10 quit with status 3
after writing track 9
process 11 quit with status 4
after writing track 0
process 12 quit with status 5
after writing track 7
process 13 quit with status 6
after writing track 2
process 14 quit with status 7
after writing track 1
process 15 quit with status 8
after writing track 6
process 16 quit with status 9
start4(): done 33
All processes completed.

starting test 10 ....

start4(): disk scheduling test, 8 children
          algorithm test           
              same track different sectors
going to write to sector 5
going to write to sector 3
going to write to sector 9
going to write to sector 0
going to write to sector 7
going to write to sector 2
going to write to sector 1
going to write to sector 6
after writing to sector 5
process 9 quit with status 2
after writing to sector 3
process 10 quit with status 3
after writing to sector 9
process 11 quit with status 4
after writing to sector 0
process 12 quit with status 5
after writing to sector 7
process 13 quit with status 6
after writing to sector 2
process 14 quit with status 7
after writing to sector 1
process 15 quit with status 8
after writing to sector 6
process 16 quit with status 9
start4(): done 33
All processes completed.

starting test 11 ....

start4(): disk scheduling test, create 6 processes that write
          3 to disk0         
          3 to disk1         
ubiq0: going to write to track 5
ubiq0: going to write to track 3
ubiq0: going to write to track 9
ubiq1: going to write to track 4
ubiq1: going to write to track 2
ubiq1: going to write to track 8
ubiq0: after writing to track 5
process 9 quit with status 2
ubiq0: after writing to track 3
process 10 quit with status 3
ubiq0: after writing to track 9
process 11 quit with status 4
ubiq1: after writing to track 4
process 12 quit with status 5
ubiq1: after writing to track 2
process 13 quit with status 6
ubiq1: after writing to track 8
process 14 quit with status 7
start4(): done 31
All processes completed.

starting test 12 ....